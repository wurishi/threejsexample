var S=Object.defineProperty;var F=(g,l,t)=>l in g?S(g,l,{enumerable:!0,configurable:!0,writable:!0,value:t}):g[l]=t;var n=(g,l,t)=>(F(g,typeof l!="symbol"?l+"":l,t),t);import{E as x,aL as y,D as L,b as C,ak as k,al as B,aM as M,A as W,aT as E}from"./example-e9f3c815.js";import{i as P,r as G}from"./styles-dfc52afc.js";import{G as I}from"./index-ba66c6be.js";import{O}from"./OrbitControls-94bee5b1.js";import{G as N}from"./GLTFLoader-27d86567.js";class X extends x{constructor(){super(...arguments);n(this,"model");n(this,"skeleton");n(this,"numAnimations",0);n(this,"allActions",[]);n(this,"baseActions",{idle:{weight:1},walk:{weight:0},run:{weight:0}});n(this,"additiveActions",{sneak_pose:{weight:0},sad_pose:{weight:0},agree:{weight:0},headShake:{weight:0}});n(this,"currentBaseAction","idle");n(this,"panelSettings",{"modify time scale":1});n(this,"crossFadeControls",[]);n(this,"createPanel",t=>{const e=new I({width:310}),a=e.addFolder("Base Actions"),s=e.addFolder("Additive Action Weights"),c=e.addFolder("General Speed");return["None",...Object.keys(this.baseActions)].forEach(i=>{const o=this.baseActions[i];this.panelSettings[i]=()=>{const r=this.baseActions[this.currentBaseAction],u=r?r.action:null,h=o?o.action:null;u!==h&&this.prepareCrossFade(u,h,.35)},this.crossFadeControls.push(a.add(this.panelSettings,i))}),Object.keys(this.additiveActions).forEach(i=>{const o=this.additiveActions[i];this.panelSettings[i]=o.weight,s.add(this.panelSettings,i,0,1,.01).listen().onChange(r=>{this.setWeight(o.action,r),o.weight=r})}),c.add(this.panelSettings,"modify time scale",0,1.5,.01).onChange(i=>{this.mixer&&(this.mixer.timeScale=i)}),a.open(),s.open(),c.open(),this.crossFadeControls.forEach(i=>{i.setInactive=()=>{i.domElement.parentElement.classList.add("control-inactive")},i.setActive=()=>{i.domElement.parentElement.classList.remove("control-inactive")};const o=this.baseActions[i.property];(!o||!o.weight)&&i.setInactive()}),P(`
    .control-inactive {
      color: #888;
    }
    `,"blending"),()=>{e.destroy(),G("blending")}});n(this,"prepareCrossFade",(t,e,a)=>{if(this.currentBaseAction==="idle"||!t||!e?this.executeCrossFade(t,e,a):this.synchronizeCrossFade(t,e,a),e){const s=e.getClip();this.currentBaseAction=s.name}else this.currentBaseAction="None";this.crossFadeControls.forEach(s=>{s.property===this.currentBaseAction?s.setActive():s.setInactive()})});n(this,"executeCrossFade",(t,e,a)=>{e?(this.setWeight(e,1),e.time=0,t?t.crossFadeTo(e,a,!0):e.fadeIn(a)):t.fadeOut(a)});n(this,"synchronizeCrossFade",(t,e,a)=>{var c;const s=f=>{var i;f.action===t&&((i=this.mixer)==null||i.removeEventListener("loop",s),this.executeCrossFade(t,e,a))};(c=this.mixer)==null||c.addEventListener("loop",s)});n(this,"activateAction",t=>{const e=t.getClip(),a=this.baseActions[e.name]||this.additiveActions[e.name];a&&(this.setWeight(t,a.weight),t.play())});n(this,"setWeight",(t,e)=>{t.enabled=!0,t.setEffectiveTimeScale(1),t.setEffectiveWeight(e)})}init(t){super.init(t);const e=this.utils.createScene(null,[]);this.scene=e,this.renderer.shadowMap.enabled=!0;const a=new y(16777215,4473924);a.position.set(0,20,0),e.add(a);const s=new L(16777215);s.position.set(3,10,10),s.castShadow=!0,s.shadow.camera.top=2,s.shadow.camera.bottom=-2,s.shadow.camera.left=-2,s.shadow.camera.right=2,s.shadow.camera.near=.1,s.shadow.camera.far=40,e.add(s);const c=new C(new k(100,100),new B({color:10066329,depthWrite:!1}));c.rotation.x=-Math.PI/2,c.receiveShadow=!0,e.add(c);let f;new N().load("assets/models/gltf/Xbot.glb",u=>{const h=u.scene;this.model=h,e.add(h),h.traverse(m=>{m instanceof C&&m.isMesh&&(m.castShadow=!0)});const v=new M(h);this.skeleton=v,v.visible=!1,e.add(v);const b=u.animations,A=new W(h);this.mixer=A,this.numAnimations=b.length;for(let m=0;m<this.numAnimations;m++){let d=b[m];const w=d.name;if(this.baseActions[w]){const p=A.clipAction(d);this.activateAction(p),this.baseActions[w].action=p,this.allActions.push(p)}else if(this.additiveActions[w]){E.makeClipAdditive(d),d.name.endsWith("_pose")&&(d=E.subclip(d,d.name,2,3,30));const p=A.clipAction(d);this.activateAction(p),this.additiveActions[w].action=p,this.allActions.push(p)}}f=this.createPanel(t.ui)});const o=this.utils.createPerspectiveCamera(null,[-1,2,3]);this.camera=o;const r=new O(o,this.renderer.domElement);return this.controls=r,r.enablePan=!1,r.enableZoom=!1,r.target.set(0,1,0),r.update(),()=>{f&&f()}}}export{X as default};
